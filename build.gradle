plugins {
    id 'com.bmuschko.docker-remote-api' version '6.6.1'
}

allprojects {
    group = "io.easylogic"
    version = "0.0.1-SNAPSHOT"
}

subprojects {
    buildscript {
        ext {
            aeronVersion = "1.29.0"
            jlbhVersion = "1.0.1"
            hdrHistogramVersion = "2.1.12"
        }
        repositories {
            mavenCentral()
            mavenLocal()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    apply plugin: "java"
    apply plugin: "com.bmuschko.docker-remote-api"

    sourceCompatibility = 8
    targetCompatibility = 8

    repositories {
        mavenCentral()
    }

}

subprojects.findAll { it.name.contains("ping") }.forEach {
    configure(it) {
        dependencies {
            implementation(project(":common"))
            implementation("net.openhft:jlbh:$jlbhVersion")
            implementation "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"
        }
    }
}


import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

subprojects.findAll { it.name.contains("ping") or it.name.contains("pong") }.forEach { project ->

    configure(project) {
        apply plugin: 'application'
        ext {
            imageName = "easy-logic/$project.name"
        }

        dependencies {
            implementation(this.project(":common"))
        }

        task removeImage(type: DockerRemoveImage) {
            targetImageId(imageName)
            onError { logger.warn(it.message) }
        }

        task copyDependencies(type: Copy) {
            from configurations.default
            into "$project.buildDir/libs"
        }

        task createDockerfile(type: Dockerfile) {
            from "adoptopenjdk/openjdk14:alpine-jre"
            copyFile("libs/*.jar", "/app/")
            if (!project.name.contains("spring-boot-pong")) {
                entryPoint(project.provider { ["java", "-cp", "/app/*", project.application.mainClass.get()] })
            } else {
                entryPoint(project.provider { ["java", "-jar", "/app/${project.jar.archiveFileName.get()}"] })
            }
        }

        task buildImage(type: DockerBuildImage) {
            // spring boot compiles everything in a flat jar, so no need to copy dependencies
            if (!project.name.contains("spring-boot-pong")) {
                dependsOn copyDependencies
            }
            dependsOn createDockerfile
            inputDir = project.buildDir
            dockerFile = file("$project.buildDir/docker/Dockerfile")
            images.add("$imageName:latest")
        }

        build.dependsOn buildImage
        clean.dependsOn removeImage
    }
}



