plugins {
	id 'com.bmuschko.docker-remote-api' version '6.6.1'
}

allprojects {
    group = "io.easylogic"
    version = "0.0.1-SNAPSHOT"
}

subprojects {
    buildscript {
        ext {
            aeronVersion = "1.29.0"
            jlbhVersion = "1.0.1"
        }
        repositories {
            mavenCentral()
            mavenLocal()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    apply plugin : "java"
    apply plugin : "com.bmuschko.docker-remote-api"

    sourceCompatibility = 8
    targetCompatibility = 8

    repositories {
        mavenCentral()
    }
}

subprojects.findAll {it.name.contains("ping")}.forEach { project ->
    configure(project) {
        dependencies {
            implementation("net.openhft:jlbh:1.0.1")
        }
    }
}

import com.bmuschko.gradle.docker.tasks.image.*

subprojects.findAll {it.name.contains("ping") or it.name.contains("pong")}.forEach { project ->
    configure(project) {
        apply plugin: 'application'
        afterEvaluate {
            ext {
                imageName = "easy-logic/$project.name"
            }

            task removeImage(type: DockerRemoveImage) {
                targetImageId(imageName)
                onError { logger.warn(it.message) }
            }

            task copyDependencies(type: Copy) {
                from configurations.default
                into "$project.buildDir/libs"
            }

            task createDockerfile(type: Dockerfile) {
                from "openjdk:8-alpine"
                copyFile("libs/*.jar", "/app/")
                if (!project.name.contains("spring-boot-pong")) {
                    entryPoint("java", "-cp", "/app/*", project.application.mainClassName)
                } else {
                    entryPoint("java", "-jar", "/app/${project.jar.archiveFileName.get()}")
                }
            }

            task buildImage(type: DockerBuildImage) {
                // spring boot compiles everything in a flat jar, so no need to copy dependencies
                if (!project.name.contains("spring-boot-pong")) {
                    dependsOn copyDependencies
                }
                dependsOn createDockerfile
                inputDir = project.buildDir
                dockerFile = file("$project.buildDir/docker/Dockerfile")
                images.add("$imageName:latest")
            }

            build.dependsOn buildImage
            clean.dependsOn removeImage

        }
    }
}



